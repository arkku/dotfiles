#!/bin/bash
# link_files: Dotfiles linker.
#
# This is a script for linking configuration files (or "dotfiles") from
# a directory tree to another.
#
# The intended use is to have a directory tree with configuration files
# that are intended to be hard-linked into the user's home directory, e.g.,
# one can have ".dotfiles/.bashrc" which is shared across many systems,
# then running this script in `.dotfiles` will link it to "~/.bashrc".
# 
# There can be platform-specific files placed in a directory with the
# platform's name (e.g., "mac", "linux"). If one exists for the current
# platform (as determined by "uname -s"), it will be used instead of
# any generic one.
#
# If you need to locally customize some files that are otherwise part of
# the shared dotfiles, create a local file with "_local" appended to its
# name, e.g., ".bashrc_local" prevents ".bashrc" from being linked.
#
# Alternatively, you can now specify the command-line option `-c customdir`
# where customdir is a _subdirectory of the source directory_ containing custom
# overrides that take precedence over files in either the source directory or
# the platform directory. (The directory `local` is in gitignore so you can put
# or symlink your custom configurations there.)
#
# directory containing your custom files that will be
# linked. A file in the custom directory takes precedence over a file with the
# same name in the source directory.
#
# By Kimmo Kulovesi <https://arkku.dev/>
# Distribute freely, use at your own risk only!

set -e

src_dir="$(dirname "$0")"
dst_dir="$HOME"
cmd_prefix=''
verbose=''
force=''
custom=''

while [ -n "$1" ]; do
    case "$1" in
        --source=*)
            src_dir="$1"
            src_dir="${src_dir/#--source=/}"
            ;;
        -s)
            shift
            src_dir="$1"
            ;;
        --destination=*)
            dst_dir="$1"
            dst_dir="${dst_dir/#--destination=/}"
            ;;
        -d)
            shift
            dst_dir="$1"
            ;;
        -c)
            shift
            custom="$1"
            ;;
        --custom=*)
            custom="$1"
            custom="${custom/#--custom=/}"
            custom="${custom/#$src_dir\//}"
            ;;
        --dry-run|-n)
            cmd_prefix='echo'
            ;;
        --verbose|-v)
            verbose='-v'
            ;;
        --force|-f)
            force='-f'
            ;;
        --help|--usage|-h|-?)
            cat <<EOF
Usage: $(basename "$0") [OPTIONS]

Options:
    -n
    --dry-run       Print the commands, but don't actually link anything.
    -v
    --verbose       Increase verbosity.
    -f
    --force         Overwrite any existing files. Recommended!
    -s PATH
    --source=PATH   Use the directory at PATH as the source for files.
    -d D
    --destination=D Use the directory D as the destination (default "\$HOME")

    Options cannot be combined, i.e., use "-v -f" instead of "-vf".

Example:
    $(basename "$0") -v -f

Description:

$(awk -F'#' 'NR>3 && /^#/ { print $2 }' "$0")
EOF
            exit 0
            ;;
    esac
    shift
done

[ -n "$verbose" ] && echo "Linking from: $src_dir" >&2

cd "$src_dir"

if [ -n "$custom" ]; then
    if [ ! -d "$custom/." ]; then
        if [ -d "local/$custom/." ]; then
            custom="local/$custom"
        elif [ -d "custom/$custom/." ]; then
            custom="custom/$custom"
        else
            echo "Error: Custom directory does not exist: $custom" >&2
            exit 1
        fi
    fi
    [ -n "$verbose" ] && echo "Custom configuration: $custom" >&2
fi

platform="$(uname -s | tr '[A-Z]' '[a-z]')"
[ "$platform" = "darwin" ] && platform=mac

find . -type f -print0 | while read -d '' file; do
    src="${file/#.\//}"

    case "$src" in
        *DS_Store|*.swp)
            continue
            ;;
        $platform/*)    # Platform-specific file for the current platform
            dst="${src/#$platform\//}"
            ;;
        $custom/*)
            dst="${src/#$custom\//}"
            ;;
        .git/*|.gitignore|.gitmodules|.tags)    # Ignore git directory
            continue
            ;;
        .*|bin/*|share/*|man/*)          # Dotfiles and whitelisted paths

            # Ignore generic version if a platform-specific one exists
            [ -e "$platform/$file" ] && continue

            # Ignore custom version if it exists
            [ -n "$custom" -a -e "$custom/$file" ] && continue

            dst="$src"
            ;;
        *)                                       # Ignore everything else
            continue
            ;;
    esac

    [ -z "$dst" ] && continue
    dst="${dst_dir}/$dst"

    if [ -e "${dst}_local" -a -e "$dst" ]; then
        [ -n "$verbose" ] && echo "$dst: A local override exists." >&2
        continue
    fi

    if [ -e "$dst" ]; then
        if [ "$src" -ef "$dst" ]; then
            [ -n "$verbose" ] && echo "$dst: Already linked." >&2
            continue
        fi

        if [ -z "$force" ]; then
            echo "$dst: Already exists!" >&2
            continue
        elif [ -z "$verbose" ]; then
            echo "$dst: Forcing overwrite." >&2
        fi
    else
        dstdir="$(dirname "$dst")"
        [ ! -e "$dstdir" ] && $cmd_prefix mkdir -p $verbose "$dstdir"
    fi

    [ -z "$verbose" ] && echo "$dst"

    $cmd_prefix ln $verbose $force -n "$src" "$dst"
done

